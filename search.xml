<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于 TCP 、UDP协议的 Socket 程序函数调用过程</title>
      <link href="blog/%E5%9F%BA%E4%BA%8E%20TCP%20%E3%80%81UDP%E5%8D%8F%E8%AE%AE%E7%9A%84%20Socket%20%E7%A8%8B%E5%BA%8F%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/"/>
      <url>blog/%E5%9F%BA%E4%BA%8E%20TCP%20%E3%80%81UDP%E5%8D%8F%E8%AE%AE%E7%9A%84%20Socket%20%E7%A8%8B%E5%BA%8F%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>此文介绍了基于 TCP 、UDP协议的 Socket 程序函数调用过程</p></blockquote><p><strong>本文会随着作者日常学习进行补充及内容修正</strong></p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>TCP 协议</code>是基于数据流的，所以设置为 SOCK_STREAM，而 <code>UDP 协议</code>是基于数据报的，因而设置为 SOCK_DGRAM。</p><h1 id="基于-TCP-协议的-Socket-程序函数调用过程"><a href="#基于-TCP-协议的-Socket-程序函数调用过程" class="headerlink" title="基于 TCP 协议的 Socket 程序函数调用过程"></a>基于 TCP 协议的 Socket 程序函数调用过程</h1><h2 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h2><p>TCP 的服务端要先<code>监听一个端口</code>，一般是先<code>调用 bind 函数</code>，给这个 Socket 赋予<code>一个 IP 地址和端口</code>。当服务端有了 IP 和端口号，就可以<code>调用 listen 函数监听</code>,服务端就<code>进入了 listen 状态</code>，这个时候<code>客户端就可以发起连接</code>。 在<code>内核</code>中，为每个 Socket<code>维护两个队列</code>。一个是<code>已经建立了连接</code>的队列，这时候连接<code>三次握手已经完毕</code>，处于 <code>established 状态</code>；一个是<code>还没有完全建立连接</code>的队列，这个时候<code>三次握手还没完成</code>，处于<code>syn_rcvd 的状态</code>。 接下来，服务端<code>调用 accept 函数</code>，拿出一个<code>已经完成的连接</code>进行处理。如果<code>还没有完成，就要等着</code>。 在服务端等待的时候，客户端可以通过<code>connect 函数发起连接</code>。先在参数中指明要<code>连接的 IP 地址和端口号</code>，然后开始<code>发起三次握手</code>。内核会给客户端分配一个临时的<code>端口</code>。一旦握手成功，服务端的 <code>accept</code>就会<code>返回另一个 Socket</code>。 这是一个经常考的知识点，<strong>就是监听的 Socket 和真正用来传数据的 Socket 是两个，一个叫作监听 Socket，一个叫作已连接 Socket</strong>。 连接建立成功之后，双方开始通过<code>read 和 write 函数来读写数据</code>，就像往一个文件流里面写东西一样。 </p><p><img src="TCP_socket.png" alt="基于 TCP 协议的 Socket 程序函数调用过程"></p><h2 id="最大连接数"><a href="#最大连接数" class="headerlink" title="最大连接数"></a>最大连接数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;本机 IP, 本机端口, 对端 IP, 对端端口&#125;</span><br></pre></td></tr></table></figure><p><strong>只要任意一个参数发生变化，就是一个新的连接</strong></p><hr><h1 id="基于-UDP-协议的-Socket-程序函数调用过程"><a href="#基于-UDP-协议的-Socket-程序函数调用过程" class="headerlink" title="基于 UDP 协议的 Socket 程序函数调用过程"></a>基于 UDP 协议的 Socket 程序函数调用过程</h1><p>UDP 是没有连接的，所以<code>不需要三次握手</code>，也就<code>不需要调用 listen 和 connect</code>，但是UDP 的交互仍然<code>需要 IP 和端口号</code>，因而也<code>需要 bind</code>。UDP 是<code>没有维护连接状态</code>的，因而不需要每对连接建立一组 Socket，而是<code>只要有 一个 Socket</code>，就能够和多个客户端通信。也正是因为没有连接状态，每次通信的时候，都<code>调用 sendto 和 recvfrom</code>，就可以传入 IP 地址和端口。</p><p><img src="UDP_socket.png" alt="基于 UDP 协议的 Socket 程序函数调用过程"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO模型</title>
      <link href="blog/IO%E6%A8%A1%E5%9E%8B/"/>
      <url>blog/IO%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>此文介绍了I/O模型的基本概念</p></blockquote><p><strong>本文会随着作者日常学习进行补充及内容修正</strong></p><hr><h1 id="I-O模型的概念"><a href="#I-O模型的概念" class="headerlink" title="I/O模型的概念"></a>I/O模型的概念</h1><p><code>I/O 模型</code>简单的理解：就是用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。<br><code>Java</code> 共支持 <code>3 种</code>网络编程模型 I/O 模式：<strong><code>BIO</code>、<code>NIO</code>、<code>AIO</code></strong>。</p><h2 id="BIO模型"><a href="#BIO模型" class="headerlink" title="BIO模型"></a>BIO模型</h2><p><code>BIO</code>：同步并<code>阻塞</code>（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。</p><p><img src="BIO.png" alt="BIO模型"></p><h2 id="NIO模型"><a href="#NIO模型" class="headerlink" title="NIO模型"></a>NIO模型</h2><p><code>NIO</code>：同步<code>非阻塞</code>，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 <code>I/O</code> 请求就进行处理。</p><p><img src="NIO.png" alt="NIO模型"></p><h2 id="AIO模型"><a href="#AIO模型" class="headerlink" title="AIO模型"></a>AIO模型</h2><p><code>Java AIO(NIO.2)</code>：异步非阻塞，<code>AIO</code> 引入异步通道的概念，采用了 <code>Proactor</code> 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p><h1 id="BIO、NIO、AIO-使用场景分析"><a href="#BIO、NIO、AIO-使用场景分析" class="headerlink" title="BIO、NIO、AIO 使用场景分析"></a>BIO、NIO、AIO 使用场景分析</h1><p><code>BIO</code> 方式适用于<code>连接数目比较小且固定</code>的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，但程序简单易理解。<br><code>NIO</code> 方式适用于<code>连接数目多且连接比较短</code>（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯等。编程比较复杂，JDK1.4 开始支持。<br><code>AIO</code> 方式使用于<code>连接数目多且连接比较长</code>（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级功能</title>
      <link href="blog/%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/"/>
      <url>blog/%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="相册编辑方式"><a href="#相册编辑方式" class="headerlink" title="相册编辑方式"></a>相册编辑方式</h1><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup [name] [description] [link] [img-url] %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述文字</td></tr><tr><td>link</td><td>图库链接</td></tr><tr><td>img-url</td><td>封面图片链接,可以是网址，也可以是本地文件链接</td></tr></tbody></table></div><p>可以同时嵌套多个<code>galleryGroup</code>,例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup &quot;壁纸&quot; &quot;收藏的一些壁纸&quot; &quot;&#x2F;Gallery&#x2F;wallpaper&quot; &quot;&#x2F;Gallery&#x2F;01&#x2F;5.jpg&quot; %&#125;</span><br><span class="line">&#123;% galleryGroup &quot;游戏&quot; &quot;一些游戏图片&quot; &quot;&#x2F;Gallery&#x2F;games&quot; &quot;&#x2F;Gallery&#x2F;02&#x2F;5.jpg&quot; %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="相册图片自动排版"><a href="#相册图片自动排版" class="headerlink" title="相册图片自动排版"></a>相册图片自动排版</h2><p>Gallery相册会自动根据图片宽高进行排版，可用于相册子页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![图片描述](图片链接)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>直接在gallery标签内使用markdown的插入图片语句: <code>![图片描述](图片链接)</code> 就行，数量不限。例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](&#x2F;Gallery&#x2F;02&#x2F;1.jpg)</span><br><span class="line">![](&#x2F;Gallery&#x2F;02&#x2F;2.jpg)</span><br><span class="line">![](&#x2F;Gallery&#x2F;02&#x2F;3.jpg)</span><br><span class="line">![](&#x2F;Gallery&#x2F;02&#x2F;4.jpg)</span><br><span class="line">![](&#x2F;Gallery&#x2F;02&#x2F;5.jpg)</span><br><span class="line">![](&#x2F;Gallery&#x2F;02&#x2F;6.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h2 id="文字底纹"><a href="#文字底纹" class="headerlink" title="文字底纹"></a>文字底纹</h2><p>可以给一部分文字设置各种颜色的底纹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>text</td><td>文本内容</td></tr><tr><td>color</td><td>[可选] 颜色,默认为 <code>default</code> 可选值：<code>default</code> / <code>blue</code> / <code>pink</code> / <code>red</code> / <code>purple</code> / <code>orange</code> / <code>green</code></td></tr></tbody></table></div><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">&#123;% label 日照 red %&#125;香炉生&#123;% label 紫烟 purple %&#125;，遥看&#123;% label 瀑布 blue %&#125;挂前川。</span><br><span class="line">飞流直下&#123;% label 三千尺 orange %&#125;，疑是&#123;% label 银河 pink %&#125;落九天。</span><br></pre></td></tr></table></figure><p><mark class="hl-label red">日照</mark> 香炉生<mark class="hl-label purple">紫烟</mark> ，遥看<mark class="hl-label blue">瀑布</mark> 挂前川。<br>飞流直下<mark class="hl-label orange">三千尺</mark> ，疑是<mark class="hl-label pink">银河</mark> 落九天。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章编辑</title>
      <link href="blog/done/"/>
      <url>blog/done/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文章编辑方式"><a href="#文章编辑方式" class="headerlink" title="文章编辑方式"></a>文章编辑方式</h1><hr><blockquote><p>文章书写格式：</p></blockquote><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>title</td><td>页面的标题</td></tr><tr><td>date</td><td>页面创建日期，一般自动生成。</td></tr><tr><td>updated</td><td>[可选] 页面更新日期</td></tr><tr><td>sticky</td><td>[可选]文章置顶 可选值： <code>任意数字</code>(数值越大，置顶的优先级越大) \ <code>false</code></td></tr><tr><td>tags</td><td>[可选] 文章的标签，设置了标签后会在标签页面自动更新</td></tr><tr><td>categories</td><td>[可选] 文章的分类，设置了分类后会在分类页面自动更新</td></tr><tr><td>keywords</td><td>[可选] 关键字</td></tr><tr><td>description</td><td>[可选] 页面描述</td></tr><tr><td>cover</td><td>[可选] 网站主页显示文章的缩略图，如果没设置<code>top_img</code>,文章顶部则显示此图片。 可设置为 <code>图片地址</code> 、 <code>false</code> 、留空 (不设置则显示默认图片)</td></tr><tr><td>top_img</td><td>[可选] 页面顶部图片(不设置则显示默认图片) 可设置为 <code>图片地址</code> 或 <code>颜色</code></td></tr><tr><td>comments</td><td>[可选]页面评论（需要配置评论系统）, 可选值：<code>true</code> \ <code>false</code></td></tr><tr><td>toc</td><td>[可选] 文章目录 可选值：<code>true</code> \ <code>false</code></td></tr><tr><td>toc_number</td><td>[可选] 目录每个标题生成对应序号 可选值：<code>true</code> \ <code>false</code></td></tr><tr><td>mathjax</td><td>[可选]数学公式插件 可选值：<code>true</code> \ <code>false</code></td></tr><tr><td>aside</td><td>[可选] 显示侧边栏 可选值：<code>true</code> \ <code>false</code></td></tr><tr><td>highlight_shrink</td><td>[可选] 设置代码框是否展开 可选值：<code>true</code> \ <code>false</code></td></tr><tr><td>copyright</td><td>[可选] 文章版权模块（启用后复制内容会加入设置的版权信息） 可选值：<code>true</code> \ <code>false</code></td></tr><tr><td>copyright_author</td><td>[可选] 文章版权模块<code>作者名</code></td></tr><tr><td>copyright_author_href</td><td>[可选] 文章版权模块<code>作者主页链接</code></td></tr><tr><td>copyright_url</td><td>[可选] 文章版权模块<code>文章链接</code></td></tr><tr><td>copyright_info</td><td>[可选] 文章版权模块<code>版权声明</code>文字</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
